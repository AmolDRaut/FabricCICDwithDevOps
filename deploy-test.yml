trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Fabric-Shared-Credentials
- group: Fabric-Test

stages:
- stage: DeployTest
  displayName: 'Deploy to Test Environment'
  jobs:
  - deployment: DeployTestJob
    displayName: 'Deploy Fabric Assets to Test'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:

          # Download build artifacts from main branch
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifacts'
            inputs:
              buildType: 'specific'
              project: '$(System.TeamProject)'
              definition: 'Fabric-CICD-Demo Build'
              buildVersionToDownload: 'latestFromBranch'
              branchName: 'refs/heads/main'
              artifactName: 'fabric-assets'
              targetPath: '$(Pipeline.Workspace)/fabric-assets'

          # Set up Python environment
          - task: UsePythonVersion@0
            displayName: 'Use Python 3.12'
            inputs:
              versionSpec: '3.12'
              addToPath: true

          # Install required Python packages
          - script: |
              python -m pip install --upgrade pip
              pip install fabric-cicd azure-identity
            displayName: 'Install Dependencies'

          # Verify parameter.yml exists in artifacts
          - task: PowerShell@2
            displayName: 'Verify parameter.yml exists'
            inputs:
              targetType: 'inline'
              script: |
                $parameterPath = "$(Pipeline.Workspace)/fabric-assets/src/parameter.yml"
                
                if (-not (Test-Path $parameterPath)) {
                  Write-Error "parameter.yml not found at: $parameterPath"
                  exit 1
                }

          # Load test configuration variables
          - task: PowerShell@2
            displayName: 'Load Test Configuration'
            inputs:
              targetType: 'inline'
              script: |
                $testParamsPath = "$(Pipeline.Workspace)/fabric-assets/environments/test/parameters.json"
                $testParams = Get-Content $testParamsPath | ConvertFrom-Json
                
                Write-Host "##vso[task.setvariable variable=testWorkspaceName]$($testParams.workspaceName)"
                Write-Host "##vso[task.setvariable variable=testEnvironment]$($testParams.ENVIRONMENT)"

          # Authenticate to Fabric services and get workspace ID
          - task: PowerShell@2
            displayName: 'Authenticate to Fabric Services'
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name MicrosoftPowerBIMgmt -Force -Scope CurrentUser -AllowClobber
                
                try {
                  $securePassword = ConvertTo-SecureString "$(clientSecret)" -AsPlainText -Force
                  $credential = New-Object System.Management.Automation.PSCredential("$(clientId)", $securePassword)
                  
                  Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "$(tenantId)"
                  
                  $workspace = Get-PowerBIWorkspace -Name "$(testWorkspaceName)"
                  if ($workspace) {
                    Write-Host "##vso[task.setvariable variable=testWorkspaceId]$($workspace.Id)"
                    Write-Host "Test workspace found: $(testWorkspaceName)"
                  } else {
                    Write-Error "Test workspace not found: $(testWorkspaceName)"
                    exit 1
                  }
                }
                catch {
                  Write-Error "Authentication failed: $($_.Exception.Message)"
                  exit 1
                }

          # Deploy foundation assets (Lakehouse, Dataflow)
          - script: |
              cd "$(Pipeline.Workspace)/fabric-assets"
              python -c "
              import os
              from fabric_cicd import FabricWorkspace, publish_all_items
              from azure.identity import ClientSecretCredential

              tenant_id = os.environ['TENANT_ID']
              client_id = os.environ['CLIENT_ID']
              client_secret = os.environ['CLIENT_SECRET']
              credential = ClientSecretCredential(tenant_id=tenant_id, client_id=client_id, client_secret=client_secret)
              workspace_id = os.environ['FABRIC_WORKSPACE_ID']
              environment = os.environ['TARGET_ENVIRONMENT']

              foundation_assets = ['Lakehouse', 'Dataflow']
              
              try:
                  workspace = FabricWorkspace(
                      workspace_id=workspace_id,
                      repository_directory='src',
                      token_credential=credential,
                      environment=environment,
                      item_type_in_scope=foundation_assets
                  )
                  publish_all_items(workspace)
              except Exception as e:
                  print(f'Foundation assets deployment failed: {e}')
                  import traceback
                  traceback.print_exc()
              "
            displayName: 'Deploy Foundation Assets'
            env:
              TENANT_ID: $(tenantId)
              CLIENT_ID: $(clientId)
              CLIENT_SECRET: $(clientSecret)
              FABRIC_WORKSPACE_ID: $(testWorkspaceId)
              TARGET_ENVIRONMENT: $(testEnvironment)

          # Deploy processing assets (Notebook, Eventhouse)
          - script: |
              cd "$(Pipeline.Workspace)/fabric-assets"
              python -c "
              import os
              from fabric_cicd import FabricWorkspace, publish_all_items
              from azure.identity import ClientSecretCredential

              tenant_id = os.environ['TENANT_ID']
              client_id = os.environ['CLIENT_ID']
              client_secret = os.environ['CLIENT_SECRET']
              credential = ClientSecretCredential(tenant_id=tenant_id, client_id=client_id, client_secret=client_secret)
              workspace_id = os.environ['FABRIC_WORKSPACE_ID']
              environment = os.environ['TARGET_ENVIRONMENT']

              processing_assets = ['Notebook', 'Eventhouse']
              
              try:
                  workspace = FabricWorkspace(
                      workspace_id=workspace_id,
                      repository_directory='src',
                      token_credential=credential,
                      environment=environment,
                      item_type_in_scope=processing_assets
                  )
                  publish_all_items(workspace)
              except Exception as e:
                  print(f'Processing assets deployment failed: {e}')
                  import traceback
                  traceback.print_exc()
              "
            displayName: 'Deploy Processing Assets'
            env:
              TENANT_ID: $(tenantId)
              CLIENT_ID: $(clientId)
              CLIENT_SECRET: $(clientSecret)
              FABRIC_WORKSPACE_ID: $(testWorkspaceId)
              TARGET_ENVIRONMENT: $(testEnvironment)

          # Deploy business intelligence assets (SemanticModel, Report)
          - script: |
              cd "$(Pipeline.Workspace)/fabric-assets"
              python -c "
              import os
              from fabric_cicd import FabricWorkspace, publish_all_items
              from azure.identity import ClientSecretCredential

              tenant_id = os.environ['TENANT_ID']
              client_id = os.environ['CLIENT_ID']
              client_secret = os.environ['CLIENT_SECRET']
              credential = ClientSecretCredential(tenant_id=tenant_id, client_id=client_id, client_secret=client_secret)
              workspace_id = os.environ['FABRIC_WORKSPACE_ID']
              environment = os.environ['TARGET_ENVIRONMENT']

              bi_assets = ['SemanticModel', 'Report']
              
              try:
                  workspace = FabricWorkspace(
                      workspace_id=workspace_id,
                      repository_directory='src',
                      token_credential=credential,
                      environment=environment,
                      item_type_in_scope=bi_assets
                  )
                  publish_all_items(workspace)
              except Exception as e:
                  print(f'BI assets deployment failed: {e}')
                  import traceback
                  traceback.print_exc()
              "
            displayName: 'Deploy BI Assets'
            env:
              TENANT_ID: $(tenantId)
              CLIENT_ID: $(clientId)
              CLIENT_SECRET: $(clientSecret)
              FABRIC_WORKSPACE_ID: $(testWorkspaceId)
              TARGET_ENVIRONMENT: $(testEnvironment)

          # Deploy advanced assets (KQLQueryset) with graceful failure handling
          - script: |
              cd "$(Pipeline.Workspace)/fabric-assets"
              python -c "
              import os
              from fabric_cicd import FabricWorkspace, publish_all_items
              from azure.identity import ClientSecretCredential

              tenant_id = os.environ['TENANT_ID']
              client_id = os.environ['CLIENT_ID']
              client_secret = os.environ['CLIENT_SECRET']
              credential = ClientSecretCredential(tenant_id=tenant_id, client_id=client_id, client_secret=client_secret)
              workspace_id = os.environ['FABRIC_WORKSPACE_ID']
              environment = os.environ['TARGET_ENVIRONMENT']

              advanced_assets = ['KQLQueryset']
              
              try:
                  workspace = FabricWorkspace(
                      workspace_id=workspace_id,
                      repository_directory='src',
                      token_credential=credential,
                      environment=environment,
                      item_type_in_scope=advanced_assets
                  )
                  publish_all_items(workspace)
                  print('KQLQueryset deployed successfully')
              except Exception as e:
                  print(f'KQLQueryset deployment not yet supported: {e}')
              "
            displayName: 'Deploy Advanced Assets'
            env:
              TENANT_ID: $(tenantId)
              CLIENT_ID: $(clientId)
              CLIENT_SECRET: $(clientSecret)
              FABRIC_WORKSPACE_ID: $(testWorkspaceId)
              TARGET_ENVIRONMENT: $(testEnvironment)

          # Validate successful test deployment
          - task: PowerShell@2
            displayName: 'Validate Test Deployment'
            inputs:
              targetType: 'inline'
              script: |
                try {
                  Install-Module -Name MicrosoftPowerBIMgmt -Force -Scope CurrentUser -AllowClobber
                  
                  $securePassword = ConvertTo-SecureString "$(clientSecret)" -AsPlainText -Force
                  $credential = New-Object System.Management.Automation.PSCredential("$(clientId)", $securePassword)
                  Connect-PowerBIServiceAccount -ServicePrincipal -Credential $credential -TenantId "$(tenantId)"
                  
                  $workspace = Get-PowerBIWorkspace -Id "$(testWorkspaceId)"
                  if ($workspace) {
                    Write-Host "Test deployment validation successful"
                    Write-Host "Workspace: $($workspace.Name)"
                    Write-Host "Environment: $(testEnvironment)"
                  }
                }
                catch {
                  Write-Error "Test validation failed: $($_.Exception.Message)"
                  exit 1
                }
                finally {
                  try { Disconnect-PowerBIServiceAccount } catch { }
                }

          # Final deployment summary
          - script: |
              echo "Test deployment completed successfully"
              echo "Environment: $(testEnvironment)"
              echo "Workspace: $(testWorkspaceName)"
              echo "Workspace ID: $(testWorkspaceId)"
              echo "Configuration method: parameter.yml find_replace"
              echo "Build: $(Build.BuildNumber)"
            displayName: 'Deployment Summary'